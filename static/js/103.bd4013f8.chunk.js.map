{"version":3,"file":"static/js/103.bd4013f8.chunk.js","mappings":"mTAEO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IACrB,4FAFG,cACCC,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACkBJ,EAAAA,EAAAA,IAAA,0DAC8BI,EAD9B,wFADlB,cACCH,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACkBN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,6DADlB,cACCL,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,uFACkBN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,qEADlB,cACCL,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAkCF,GAAlC,uFACkBN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,4EADlB,cACCL,EADD,yBAKEA,EAASC,MALX,kE,uJC/BDO,EAAgB,CACpBC,KAAM,IAGFC,EAASC,EAAAA,KAAaC,MAAM,CAChCH,KAAME,EAAAA,KAEHE,IAAI,EAAG,oCACPC,SAAS,0BAGC,SAASC,EAAT,GAAyC,IAAbC,EAAY,EAAZA,SACzC,OACE,SAAC,KAAD,CACER,cAAeA,EACfQ,SAAUA,EACVC,iBAAkBP,EAHpB,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOD,KAAK,OAAOS,KAAK,OAAOC,YAAY,wBAC3C,SAAC,KAAD,CAAcV,KAAK,UACnB,mBAAQS,KAAK,SAAb,SAAsB,eAI7B,CCvBc,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,SAerC,OAPAC,EAAAA,EAAAA,YAAU,WACY,OAAhBF,IAGJ3B,EAAAA,EAAAA,IAAkB2B,GAAaG,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBR,EAASQ,EAA1B,GACrC,GAAE,CAACJ,KAGF,4BACG,SAACd,EAAD,CAAkBC,SAfF,SAACkB,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAaC,OAAOH,OAAOA,GACjCN,EAAgB,CAAEzB,MAAOiC,IACzBD,GACD,IAYIX,GAASA,EAAMc,OAAS,IACvB,wBACGd,EAAMe,KAAI,SAAAC,GAAC,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKjB,EAAMnB,IAAMqC,MAAO,CAAEC,KAAMtB,GAAxC,SACGmB,EAAEI,SAFEpB,EAAMnB,GADL,MASfmB,GAA0B,IAAjBA,EAAMc,SACd,uBAAG,0EAMV,C","sources":["services/apiMovie.js","views/SearchMoviesForm/SearchMoviesForm.jsx","views/SearchMovies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport async function fetchTrendMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day?api_key=3146c777d7ac16a246449915cf00b285'\n  );\n\n  return response.data;\n}\n\nexport async function fetchSearchMovies(query) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=3146c777d7ac16a246449915cf00b285&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data;\n}\n\nexport async function fetchMovieDetails(id) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=3146c777d7ac16a246449915cf00b285&language=en-US`\n  );\n\n  return response.data;\n}\n\nexport async function fetchMovieCredits(id) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=3146c777d7ac16a246449915cf00b285&language=en-US`\n  );\n\n  return response.data;\n}\n\nexport async function fetchMoviesReviews(id) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=3146c777d7ac16a246449915cf00b285&language=en-US&page=1`\n  );\n\n  return response.data;\n}\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nconst initialValues = {\n  name: '',\n};\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Must be longer than 2 characters')\n    .required('Please enter request'),\n});\n\nexport default function SearchMoviesForm({ onSubmit }) {\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      <Form>\n        <Field name=\"name\" type=\"text\" placeholder=\"Enter a film title\"></Field>\n        <ErrorMessage name=\"name\" />\n        <button type=\"submit\">Search</button>\n      </Form>\n    </Formik>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { fetchSearchMovies } from '../services/apiMovie';\nimport SearchMoviesForm from './SearchMoviesForm/SearchMoviesForm';\n\nexport default function SearchMovies() {\n  const location = useLocation();\n  const [movie, setMovie] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const handleSubmit = (values, { resetForm }) => {\n    const inputValue = Object.values(values);\n    setSearchParams({ query: inputValue });\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (searchQuery === null) {\n      return;\n    }\n    fetchSearchMovies(searchQuery).then(({ results }) => setMovie(results));\n  }, [searchQuery]);\n\n  return (\n    <div>\n      {<SearchMoviesForm onSubmit={handleSubmit} />}\n      {movie && movie.length > 0 && (\n        <ul>\n          {movie.map(m => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {m.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      {movie && movie.length === 0 && (\n        <p>\n          We will not find anything. Please change the request and try again.\n        </p>\n      )}\n    </div>\n  );\n}\n"],"names":["fetchTrendMovies","axios","response","data","fetchSearchMovies","query","fetchMovieDetails","id","fetchMovieCredits","fetchMoviesReviews","initialValues","name","schema","yup","shape","min","required","SearchMoviesForm","onSubmit","validationSchema","type","placeholder","SearchMovies","location","useLocation","useState","movie","setMovie","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","then","results","values","resetForm","inputValue","Object","length","map","m","to","state","from","title"],"sourceRoot":""}